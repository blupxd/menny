// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String?   @unique
  name          String?
  password      String?
  lastname      String?
  emailVerified DateTime?
  terms         Boolean   @default(true)
  image         String?
  accounts      Account[]
  sessions      Session[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  menus         Menu[]
}

model Menu {
  id         String     @id @default(cuid())
  categories Category[]
  menuName   String
  theme      String?    @default("default")
  userId     String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id           String   @id @default(cuid())
  items        Item[]
  columns      Int
  menuId       String
  categoryName String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  menu         Menu     @relation(fields: [menuId], references: [id], onDelete: Cascade)
}

model Item {
  id              String   @id @default(cuid())
  categoryId      String
  itemName        String
  image           String?
  price           String
  itemDescription String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  category        Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}
